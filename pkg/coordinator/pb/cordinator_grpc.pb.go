// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: cordinator.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Coordinator_CoordinatorSignupRequest_FullMethodName       = "/pb.Coordinator/CoordinatorSignupRequest"
	Coordinator_CoordinatorSignupVerifyRequest_FullMethodName = "/pb.Coordinator/CoordinatorSignupVerifyRequest"
	Coordinator_CoordinatorLoginRequest_FullMethodName        = "/pb.Coordinator/CoordinatorLoginRequest"
	Coordinator_CoordinatorAddPackage_FullMethodName          = "/pb.Coordinator/CoordinatorAddPackage"
	Coordinator_CoordinatorAddDestination_FullMethodName      = "/pb.Coordinator/CoordinatorAddDestination"
	Coordinator_CoordinatorAddActivity_FullMethodName         = "/pb.Coordinator/CoordinatorAddActivity"
	Coordinator_CoordinatorViewPackage_FullMethodName         = "/pb.Coordinator/CoordinatorViewPackage"
)

// CoordinatorClient is the client API for Coordinator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoordinatorClient interface {
	CoordinatorSignupRequest(ctx context.Context, in *CoordinatorSignup, opts ...grpc.CallOption) (*CoordinatorSignupResponce, error)
	CoordinatorSignupVerifyRequest(ctx context.Context, in *CoordinatorVerify, opts ...grpc.CallOption) (*CoordinatorVerifyResponce, error)
	CoordinatorLoginRequest(ctx context.Context, in *CoordinatorLogin, opts ...grpc.CallOption) (*CoordinatorLoginResponce, error)
	CoordinatorAddPackage(ctx context.Context, in *AddPackage, opts ...grpc.CallOption) (*AddPackageResponce, error)
	CoordinatorAddDestination(ctx context.Context, in *AddDestination, opts ...grpc.CallOption) (*AddDestinationResponce, error)
	CoordinatorAddActivity(ctx context.Context, in *AddActivity, opts ...grpc.CallOption) (*AddActivityResponce, error)
	CoordinatorViewPackage(ctx context.Context, in *CoodinatorViewPackage, opts ...grpc.CallOption) (*Package, error)
}

type coordinatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinatorClient(cc grpc.ClientConnInterface) CoordinatorClient {
	return &coordinatorClient{cc}
}

func (c *coordinatorClient) CoordinatorSignupRequest(ctx context.Context, in *CoordinatorSignup, opts ...grpc.CallOption) (*CoordinatorSignupResponce, error) {
	out := new(CoordinatorSignupResponce)
	err := c.cc.Invoke(ctx, Coordinator_CoordinatorSignupRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) CoordinatorSignupVerifyRequest(ctx context.Context, in *CoordinatorVerify, opts ...grpc.CallOption) (*CoordinatorVerifyResponce, error) {
	out := new(CoordinatorVerifyResponce)
	err := c.cc.Invoke(ctx, Coordinator_CoordinatorSignupVerifyRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) CoordinatorLoginRequest(ctx context.Context, in *CoordinatorLogin, opts ...grpc.CallOption) (*CoordinatorLoginResponce, error) {
	out := new(CoordinatorLoginResponce)
	err := c.cc.Invoke(ctx, Coordinator_CoordinatorLoginRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) CoordinatorAddPackage(ctx context.Context, in *AddPackage, opts ...grpc.CallOption) (*AddPackageResponce, error) {
	out := new(AddPackageResponce)
	err := c.cc.Invoke(ctx, Coordinator_CoordinatorAddPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) CoordinatorAddDestination(ctx context.Context, in *AddDestination, opts ...grpc.CallOption) (*AddDestinationResponce, error) {
	out := new(AddDestinationResponce)
	err := c.cc.Invoke(ctx, Coordinator_CoordinatorAddDestination_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) CoordinatorAddActivity(ctx context.Context, in *AddActivity, opts ...grpc.CallOption) (*AddActivityResponce, error) {
	out := new(AddActivityResponce)
	err := c.cc.Invoke(ctx, Coordinator_CoordinatorAddActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) CoordinatorViewPackage(ctx context.Context, in *CoodinatorViewPackage, opts ...grpc.CallOption) (*Package, error) {
	out := new(Package)
	err := c.cc.Invoke(ctx, Coordinator_CoordinatorViewPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinatorServer is the server API for Coordinator service.
// All implementations must embed UnimplementedCoordinatorServer
// for forward compatibility
type CoordinatorServer interface {
	CoordinatorSignupRequest(context.Context, *CoordinatorSignup) (*CoordinatorSignupResponce, error)
	CoordinatorSignupVerifyRequest(context.Context, *CoordinatorVerify) (*CoordinatorVerifyResponce, error)
	CoordinatorLoginRequest(context.Context, *CoordinatorLogin) (*CoordinatorLoginResponce, error)
	CoordinatorAddPackage(context.Context, *AddPackage) (*AddPackageResponce, error)
	CoordinatorAddDestination(context.Context, *AddDestination) (*AddDestinationResponce, error)
	CoordinatorAddActivity(context.Context, *AddActivity) (*AddActivityResponce, error)
	CoordinatorViewPackage(context.Context, *CoodinatorViewPackage) (*Package, error)
	mustEmbedUnimplementedCoordinatorServer()
}

// UnimplementedCoordinatorServer must be embedded to have forward compatible implementations.
type UnimplementedCoordinatorServer struct {
}

func (UnimplementedCoordinatorServer) CoordinatorSignupRequest(context.Context, *CoordinatorSignup) (*CoordinatorSignupResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoordinatorSignupRequest not implemented")
}
func (UnimplementedCoordinatorServer) CoordinatorSignupVerifyRequest(context.Context, *CoordinatorVerify) (*CoordinatorVerifyResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoordinatorSignupVerifyRequest not implemented")
}
func (UnimplementedCoordinatorServer) CoordinatorLoginRequest(context.Context, *CoordinatorLogin) (*CoordinatorLoginResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoordinatorLoginRequest not implemented")
}
func (UnimplementedCoordinatorServer) CoordinatorAddPackage(context.Context, *AddPackage) (*AddPackageResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoordinatorAddPackage not implemented")
}
func (UnimplementedCoordinatorServer) CoordinatorAddDestination(context.Context, *AddDestination) (*AddDestinationResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoordinatorAddDestination not implemented")
}
func (UnimplementedCoordinatorServer) CoordinatorAddActivity(context.Context, *AddActivity) (*AddActivityResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoordinatorAddActivity not implemented")
}
func (UnimplementedCoordinatorServer) CoordinatorViewPackage(context.Context, *CoodinatorViewPackage) (*Package, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoordinatorViewPackage not implemented")
}
func (UnimplementedCoordinatorServer) mustEmbedUnimplementedCoordinatorServer() {}

// UnsafeCoordinatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoordinatorServer will
// result in compilation errors.
type UnsafeCoordinatorServer interface {
	mustEmbedUnimplementedCoordinatorServer()
}

func RegisterCoordinatorServer(s grpc.ServiceRegistrar, srv CoordinatorServer) {
	s.RegisterService(&Coordinator_ServiceDesc, srv)
}

func _Coordinator_CoordinatorSignupRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoordinatorSignup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).CoordinatorSignupRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_CoordinatorSignupRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).CoordinatorSignupRequest(ctx, req.(*CoordinatorSignup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_CoordinatorSignupVerifyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoordinatorVerify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).CoordinatorSignupVerifyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_CoordinatorSignupVerifyRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).CoordinatorSignupVerifyRequest(ctx, req.(*CoordinatorVerify))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_CoordinatorLoginRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoordinatorLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).CoordinatorLoginRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_CoordinatorLoginRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).CoordinatorLoginRequest(ctx, req.(*CoordinatorLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_CoordinatorAddPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).CoordinatorAddPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_CoordinatorAddPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).CoordinatorAddPackage(ctx, req.(*AddPackage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_CoordinatorAddDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDestination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).CoordinatorAddDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_CoordinatorAddDestination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).CoordinatorAddDestination(ctx, req.(*AddDestination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_CoordinatorAddActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddActivity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).CoordinatorAddActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_CoordinatorAddActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).CoordinatorAddActivity(ctx, req.(*AddActivity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_CoordinatorViewPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoodinatorViewPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).CoordinatorViewPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_CoordinatorViewPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).CoordinatorViewPackage(ctx, req.(*CoodinatorViewPackage))
	}
	return interceptor(ctx, in, info, handler)
}

// Coordinator_ServiceDesc is the grpc.ServiceDesc for Coordinator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Coordinator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Coordinator",
	HandlerType: (*CoordinatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CoordinatorSignupRequest",
			Handler:    _Coordinator_CoordinatorSignupRequest_Handler,
		},
		{
			MethodName: "CoordinatorSignupVerifyRequest",
			Handler:    _Coordinator_CoordinatorSignupVerifyRequest_Handler,
		},
		{
			MethodName: "CoordinatorLoginRequest",
			Handler:    _Coordinator_CoordinatorLoginRequest_Handler,
		},
		{
			MethodName: "CoordinatorAddPackage",
			Handler:    _Coordinator_CoordinatorAddPackage_Handler,
		},
		{
			MethodName: "CoordinatorAddDestination",
			Handler:    _Coordinator_CoordinatorAddDestination_Handler,
		},
		{
			MethodName: "CoordinatorAddActivity",
			Handler:    _Coordinator_CoordinatorAddActivity_Handler,
		},
		{
			MethodName: "CoordinatorViewPackage",
			Handler:    _Coordinator_CoordinatorViewPackage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cordinator.proto",
}
